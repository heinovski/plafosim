---
kind: pipeline
type: docker
name: syntax

steps:
- name: flake8
  image: alpine/flake8
  commands:
    - flake8 --ignore=E265,E266,E402,E501,W503,W504  # comments, import order, line-length, line-break binary operator*2

---
kind: pipeline
type: docker
name: tests

steps:
- name: unittests
  image: python:3.8-buster
  commands:
    - pip3 install -r requirements.txt
    - pip3 install -r requirements.opt.txt
    - export PYTHONPATH=$(pwd)/src
    - pytest -v --cov=plafosim tests/unit_tests

- name: coverage
  image: python:3.8-buster
  environment:
    HOST:
      from_secret: WWW_FTP_HOST
    USERNAME:
      from_secret: WWW_FTP_USER
    PASSWORD:
      from_secret: WWW_FTP_PASSWORD
  commands:
    - pip3 install -r requirements.opt.txt
    - coverage-badge -o coverage.svg
    - apt update
    - apt install lftp
    - lftp -c "set ftp:ssl-allow no; open -u $USERNAME,$PASSWORD $HOST; put coverage.svg;"

---
kind: pipeline
type: docker
name: execution

steps:
- name: no formation
  image: python:3.8-buster
  environment:
    SEED: ${DRONE_BUILD_NUMBER}
  commands:
    - pip3 install -r requirements.txt
      # we are testing both vehicle types
    - python3 ./plafosim.py --vehicles 100 --penetration 0.5 --random-seed $SEED
- name: distributed formation
  image: python:3.8-buster
  environment:
    SEED: ${DRONE_BUILD_NUMBER}
  commands:
    - pip3 install -r requirements.txt
      # we are testing both vehicle types
    - python3 ./plafosim.py --vehicles 100 --penetration 0.5 --formation-algorithm speedposition --formation-strategy distributed --random-seed $SEED
- name: centralized formation (greedy)
  image: python:3.8-buster
  environment:
    SEED: ${DRONE_BUILD_NUMBER}
  commands:
    - pip3 install -r requirements.txt
      # we are testing both vehicle types
    - python3 ./plafosim.py --vehicles 100 --penetration 0.5 --formation-algorithm speedposition --formation-strategy centralized --formation-centralized-kind greedy --infrastructures 1 --random-seed $SEED
- name: centralized formation (optimal)
  image: python:3.8-buster
  environment:
    SEED: ${DRONE_BUILD_NUMBER}
  commands:
    - pip3 install -r requirements.txt
      # we are testing both vehicle types
    - python3 ./plafosim.py --vehicles 100 --penetration 0.5 --formation-algorithm speedposition --formation-strategy centralized --formation-centralized-kind optimal --infrastructures 1 --random-seed $SEED

trigger:
  ref:
    - refs/heads/master
    - refs/heads/develop
    - refs/pull/**
    - refs/tags/*

---
kind: pipeline
type: docker
name: correctness

steps:
- name: CC
  image: dbuse/sumo-python:3.8-buster-1_6_0-slim
  environment:
    HOST:
      from_secret: ARTIFACTS_HOST
    USERNAME:
      from_secret: ARTIFACTS_USER
    PASSWORD:
      from_secret: ARTIFACTS_PASSWORD
    BASE_DIR:
      from_secret: ARTIFACTS_PATH
    DIR: ${DRONE_REPO}/${DRONE_BUILD_NUMBER}/${DRONE_STAGE_NAME}
  commands:
    - apt update
    - apt install lftp
    - apt install time
    - pip3 install -r requirements.txt
    - pip3 install -r requirements.opt.txt
    - ./scripts/validate-cf-model-cc-single.sh
    - ./scripts/validate-cf-model-cc-100.sh
    - lftp -c "open -u $USERNAME,$PASSWORD $HOST; cd $BASE_DIR; mkdir -pf $DIR; mput -O $DIR cc*.csv cc*.png"
- name: ACC
  image: dbuse/sumo-python:3.8-buster-1_6_0-slim
  environment:
    HOST:
      from_secret: ARTIFACTS_HOST
    USERNAME:
      from_secret: ARTIFACTS_USER
    PASSWORD:
      from_secret: ARTIFACTS_PASSWORD
    BASE_DIR:
      from_secret: ARTIFACTS_PATH
    DIR: ${DRONE_REPO}/${DRONE_BUILD_NUMBER}/${DRONE_STAGE_NAME}
  commands:
    - apt update
    - apt install lftp
    - apt install time
    - pip3 install -r requirements.txt
    - pip3 install -r requirements.opt.txt
    - ./scripts/validate-cf-model-acc-single.sh
    - ./scripts/validate-cf-model-acc-100.sh
    - lftp -c "open -u $USERNAME,$PASSWORD $HOST; cd $BASE_DIR; mkdir -pf $DIR; mput -O $DIR acc*.csv acc*.png"
- name: CACC
  image: dbuse/sumo-python:3.8-buster-1_6_0-slim
  environment:
    HOST:
      from_secret: ARTIFACTS_HOST
    USERNAME:
      from_secret: ARTIFACTS_USER
    PASSWORD:
      from_secret: ARTIFACTS_PASSWORD
    BASE_DIR:
      from_secret: ARTIFACTS_PATH
    DIR: ${DRONE_REPO}/${DRONE_BUILD_NUMBER}/${DRONE_STAGE_NAME}
  commands:
    - apt update
    - apt install lftp
    - apt install time
    - pip3 install -r requirements.txt
    - pip3 install -r requirements.opt.txt
    - pip3 install git+https://github.com/michele-segata/plexe-pyapi.git
    - ./scripts/validate-cf-model-cacc-single.sh
    - ./scripts/validate-cf-model-cacc-100.sh
    - lftp -c "open -u $USERNAME,$PASSWORD $HOST; cd $BASE_DIR; mkdir -pf $DIR; mput -O $DIR cacc*.csv cacc*.png"
- name: wiki upload
  image: alpine/git
  commands:
    - echo "Username '$DRONE_ASKPASS_USERNAME'"
    - echo "machine webgit.ccs-labs.org login $DRONE_ASKPASS_USERNAME password $DRONE_ASKPASS_PASSWORD" > ~/.netrc
    - git clone ${DRONE_GIT_HTTP_URL/.git/.wiki.git} /wiki
    - mkdir -p /wiki/${DRONE_BRANCH}
    - cp *.png /wiki/${DRONE_BRANCH}/
    - git -C /wiki add /wiki/${DRONE_BRANCH}
    - git -C /wiki commit -m"Add validation data for ${DRONE_COMMIT_SHA:0:8} from run ${DRONE_BUILD_NUMBER}"
    - git -C /wiki push
  when:
    branch:
      - master
      - develop

trigger:
  ref:
    - refs/heads/master
    - refs/heads/develop
    - refs/pull/**
    - refs/tags/*

---
kind: pipeline
type: docker
name: performance

steps:
- name: CC
  image: python:3.8-buster
  commands:
    - pip3 install -r requirements.txt
    - pip3 install -r requirements.opt.txt
    - python3 ./plafosim.py --pre-fill true --random-seed 0 --depart-flow true --depart-desired true --time-limit 0.1 --road-length 30 --vehicles 1000 --random-depart-position true --lanes 4 --penetration 0
- name: ACC
  image: python:3.8-buster
  commands:
    - pip3 install -r requirements.txt
    - pip3 install -r requirements.opt.txt
    - python3 ./plafosim.py --pre-fill true --random-seed 0 --depart-flow true --depart-desired true --time-limit 0.1 --road-length 30 --vehicles 1000 --random-depart-position true --lanes 4 --penetration 1
- name: CACC
  image: python:3.8-buster
  commands:
    - pip3 install -r requirements.txt
    - pip3 install -r requirements.opt.txt
    - python3 ./plafosim.py --pre-fill true --random-seed 0 --depart-desired true --time-limit 0.1 --road-length 30 --vehicles 1000 --lanes 4 --penetration 1 --start-as-platoon true

trigger:
  ref:
    - refs/heads/master
    - refs/heads/develop
    - refs/pull/**
    - refs/tags/*
